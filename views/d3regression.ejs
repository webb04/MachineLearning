<% include nav.ejs %>
<div class="statusTracker">
  <h6 class="unselected">1. Select</h6>
  <h6 class="unselected">2. Train</h6>
  <h6>3. Predict</h6>
</div>
<div class="progress updated">
  <div class="determinate select" style="width: 100%"></div>
</div>

<div>
  <h5 id="model-title"><%- title %></h5>
</div>

<script src="http://d3js.org/d3.v3.min.js"></script>
    <div id="react-main-mount" class="OLS-mount">
    </div>
    <div id="visualisation"></div>
    <script>
      var title = <%- JSON.stringify(title) %>

      var data = <%- data %>
      for (item in data) {
        data[item].id = "Training";
      }

      var featureALabel = <%- JSON.stringify(featureALabel) %>
      var featureBLabel = <%- JSON.stringify(featureBLabel) %>

      var margin = {top: 20, right: 20, bottom: 30, left: 60},
          width = 960 - margin.left - margin.right,
          height = 500 - margin.top - margin.bottom;

      // setup x
      var xValue = function(d) { return d[featureALabel];}, // data -> value
          xScale = d3.scale.linear().range([0, width]), // value -> display
          xMap = function(d) { return xScale(xValue(d));}, // data -> display
          xAxis = d3.svg.axis().scale(xScale).orient("bottom");

      // setup y
      var yValue = function(d) { return d[featureBLabel];}, // data -> value
          yScale = d3.scale.linear().range([height, 0]), // value -> display
          yMap = function(d) { return yScale(yValue(d));}, // data -> display
          yAxis = d3.svg.axis().scale(yScale).orient("left");

      // setup fill color
      var cValue = function(d) { return d.id;},
          color = d3.scale.category10();

      // var newData = function(d) { return d.Manufacturer;},
      //     color = d3.scale.category9();

      // add the graph canvas to the body of the webpage
      var svg = d3.select("#visualisation").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      // add the tooltip area to the webpage
      var tooltip = d3.select("body").append("div")
          .attr("class", "tooltip")
          .style("opacity", 0);

      // load data
      // change string (from CSV) into number format
      data.forEach(function(d) {
        d[featureALabel] = +d[featureALabel];
        d[featureBLabel] = +d[featureBLabel];
      });

      // don't want dots overlapping axis, so add in buffer to data domain
      xScale.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
      yScale.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);

      // x-axis
      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis)
        .append("text")
          .attr("class", "label")
          .attr("x", width)
          .attr("y", -6)
          .style("text-anchor", "end")
          .text(featureALabel);

      // y-axis
      svg.append("g")
          .attr("class", "y axis")
          .call(yAxis)
        .append("text")
          .attr("class", "label")
          .attr("transform", "rotate(-90)")
          .attr("y", 6)
          .attr("dy", ".71em")
          .style("text-anchor", "end")
          .text(featureBLabel);

      // draw dots
      svg.selectAll(".dot")
          .data(data)
        .enter().append("circle")
          .attr("class", "dot")
          .attr("r", 4.5)
          .attr("cx", xMap)
          .attr("cy", yMap)
          .style("fill", function(d) { return color(cValue(d));});

      // draw legend
      var legend = svg.selectAll(".legend")
      .data(color.domain())
      .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

      // draw legend colored rectangles
      legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

      // draw legend text
      legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d;});

      // Linear regression
      var xLabels = data.map(function (d) { return d[featureALabel]; })

      xScale.domain(xLabels);
      yScale.domain([0, Math.round(d3.max(data, function(d) { return d[featureBLabel]; }))]);

      var line = d3.svg.line()
        .x(function(d) { return xScale(d[featureALabel]); })
        .y(function(d) { return yScale(d[featureBLabel]); });

      // get the x and y values for least squares
  		// var xSeries = d3.range(1, xLabels.length + 1);
      var xSeries = data.map(function(d) { return d[featureALabel]; });
  		var ySeries = data.map(function(d) { return d[featureBLabel]; });

  		var leastSquaresCoeff = leastSquares(xSeries, ySeries);
  		// apply the reults of the least squares regression
      // maybe this should be lowest?
  		var x1 = xLabels[0]; // CORRECT
  		var y1 = leastSquaresCoeff[0] + leastSquaresCoeff[1];
      var y8 = leastSquaresCoeff[0] + leastSquaresCoeff[1];
  		var x2 = xLabels[xLabels.length - 1];
      var x2 = 880;
      var arr = xSeries;
      var largest = arr[0];
      for (var i = 0; i < arr.length; i++) {
          if (largest < arr[i] ) {
              largest = arr[i];
          }
      }
      console.log(largest);
  		// var y2 = (leastSquaresCoeff[0] * xSeries.length) + leastSquaresCoeff[1];
      // * max in xSeries
      var y2 = (leastSquaresCoeff[0] * largest) + leastSquaresCoeff[1];
  		var trendData = [[x1,y1,x2,y2]];

  		var trendline = svg.selectAll(".trendline")
  			.data(trendData);

  		trendline.enter()
  			.append("line")
  			.attr("class", "trendline")
  			.attr("x1", function(d) { return xScale(d[0]); })
  			.attr("y1", function(d) { return yScale(d[1]); })
  			.attr("x2", function(d) { return d[2]; })
  			.attr("y2", function(d) { console.log(d); return yScale(d[3]); })
  			.attr("stroke", "black")
  			.attr("stroke-width", 1);

  		// display equation on the chart
  		svg.append("text")
  			.text("eq: " + leastSquaresCoeff[0] + "x + " + leastSquaresCoeff[1])
  			.attr("class", "text-label")
  			.attr("x", function(d) {return xScale(x2) - 60;})
  			.attr("y", function(d) {return yScale(y2) - 30;});

  		// display r-square on the chart
  		svg.append("text")
  			.text("r-sq: " + leastSquaresCoeff[2])
  			.attr("class", "text-label")
  			.attr("x", function(d) {return xScale(x2) - 60;})
  			.attr("y", function(d) {return yScale(y2) - 10;});

  	// returns slope, intercept and r-square of the line
  	// function leastSquares(xSeries, ySeries) {
  	// 	var reduceSumFunc = function(prev, cur) { return prev + cur; };
    //
  	// 	var xBar = xSeries.reduce(reduceSumFunc) * 1.0 / xSeries.length;
  	// 	var yBar = ySeries.reduce(reduceSumFunc) * 1.0 / ySeries.length;
    //
  	// 	var ssXX = xSeries.map(function(d) { return Math.pow(d - xBar, 2); })
  	// 		.reduce(reduceSumFunc);
    //
  	// 	var ssYY = ySeries.map(function(d) { return Math.pow(d - yBar, 2); })
  	// 		.reduce(reduceSumFunc);
    //
  	// 	var ssXY = xSeries.map(function(d, i) { return (d - xBar) * (ySeries[i] - yBar); })
  	// 		.reduce(reduceSumFunc);
    //
  	// 	var slope = ssXY / ssXX;
  	// 	var intercept = yBar - (xBar * slope);
  	// 	var rSquare = Math.pow(ssXY, 2) / (ssXX * ssYY);
    //
  	// 	return [slope, intercept, rSquare];
  	// }

    function leastSquares(xSeries, ySeries) {
      var a = [];
      var b = [];
      var xtotal = 0;
      var ytotal = 0;
      var atotal = 0;
      var btotal = 0;

      for (var i in xSeries) {
        var sq = xSeries[i] * ySeries[i];
        var power = xSeries[i] * xSeries[i];
        a.push(sq);
        b.push(power);
        xtotal = xtotal + xSeries[i];
        ytotal = ytotal + ySeries[i];
      }

      for (var i in a) {
        atotal = atotal + a[i];
        btotal = btotal + b[i];
      }

      var xmean = xtotal / xSeries.length;
      var ymean = ytotal / ySeries.length;

      var amean = atotal / a.length;

      var bmean = btotal / b.length;

      var slope = ((amean - (xmean * ymean)) / (bmean - (xmean * xmean)));
      var intercept = (ymean - (slope * xmean));

      var rSquare = 0;
      return [slope, intercept, rSquare];
    }

    // function leastSquares(x, y){
    //   var lr = {};
    //   var n = y.length;
    //   var sum_x = 0;
    //   var sum_y = 0;
    //   var sum_xy = 0;
    //   var sum_xx = 0;
    //   var sum_yy = 0;
    //
    //   for (var i = 0; i < y.length; i++) {
    //
    //   sum_x += x[i];
    //   sum_y += y[i];
    //   sum_xy += (x[i]*y[i]);
    //   sum_xx += (x[i]*x[i]);
    //   sum_yy += (y[i]*y[i]);
    //   }
    //
    //   var slope = (n * sum_xy - sum_x * sum_y) / (n*sum_xx - sum_x * sum_x);
    //   var intercept = (sum_y - slope * sum_x)/n;
    //   var rSquare = Math.pow((n*sum_xy - sum_x*sum_y)/Math.sqrt((n*sum_xx-sum_x*sum_x)*(n*sum_yy-sum_y*sum_y)),2);
    //
    //   return [slope, intercept, rSquare];
    // }

    </script>

	<!-- comment out main.js to see server side only rendering -->
	<!-- <script src="/main.js"></script> -->
  <!--Import jQuery before materialize.js-->
  <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
  <script type="text/javascript" src="js/materialize.min.js"></script>
  <script>
    $(document).ready(function() {
      $('select').material_select();
      $('#react-main-mount').css('padding', '0%');
    });
  </script>

</body>
</html>
